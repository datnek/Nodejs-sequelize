'use strict';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _sequelize = _interopRequireDefault(require("sequelize"));

var fs = _interopRequireWildcard(require("fs"));

var path = _interopRequireWildcard(require("path"));

var _config = require("../config/config.database");

var basename = path.basename(__filename);
var env = process.env.NODE_ENV || 'development';
var config = new _config.ConfigDatabase().GetEnv(env);
var db = {}; // @ts-ignore

var sequelize; // @ts-ignore

sequelize = new _sequelize["default"](config.config, config.username, config.password, config);
console.log("Running in ".concat(env));
fs.readdirSync(__dirname).filter(function (file) {
  return file.indexOf('.') !== 0 && file !== basename && file.slice(-3) === '.js';
}).forEach(function (file) {
  var model = require(path.join(__dirname, file))(sequelize, _sequelize["default"].DataTypes); // @ts-ignore


  db[model.name] = model;
});
Object.keys(db).forEach(function (modelName) {
  // @ts-ignore
  if (db[modelName].associate) {
    // @ts-ignore
    db[modelName].associate(db);
  }
}); // @ts-ignore

db.sequelize = sequelize; // @ts-ignore

db.Sequelize = _sequelize["default"];
module.exports = db;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhYmFzZXMvbW9kZWxzL2luZGV4LnRzIl0sIm5hbWVzIjpbImJhc2VuYW1lIiwicGF0aCIsIl9fZmlsZW5hbWUiLCJlbnYiLCJwcm9jZXNzIiwiTk9ERV9FTlYiLCJjb25maWciLCJDb25maWdEYXRhYmFzZSIsIkdldEVudiIsImRiIiwic2VxdWVsaXplIiwiU2VxdWVsaXplIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImNvbnNvbGUiLCJsb2ciLCJmcyIsInJlYWRkaXJTeW5jIiwiX19kaXJuYW1lIiwiZmlsdGVyIiwiZmlsZSIsImluZGV4T2YiLCJzbGljZSIsImZvckVhY2giLCJtb2RlbCIsInJlcXVpcmUiLCJqb2luIiwiRGF0YVR5cGVzIiwibmFtZSIsIk9iamVjdCIsImtleXMiLCJtb2RlbE5hbWUiLCJhc3NvY2lhdGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBRUEsSUFBTUEsUUFBUSxHQUFHQyxJQUFJLENBQUNELFFBQUwsQ0FBY0UsVUFBZCxDQUFqQjtBQUNBLElBQU1DLEdBQUcsR0FBR0MsT0FBTyxDQUFDRCxHQUFSLENBQVlFLFFBQVosSUFBd0IsYUFBcEM7QUFDQSxJQUFNQyxNQUFNLEdBQUcsSUFBSUMsc0JBQUosR0FBcUJDLE1BQXJCLENBQTRCTCxHQUE1QixDQUFmO0FBQ0EsSUFBTU0sRUFBRSxHQUFHLEVBQVgsQyxDQUVBOztBQUNBLElBQUlDLFNBQUosQyxDQUVBOztBQUNBQSxTQUFTLEdBQUcsSUFBSUMscUJBQUosQ0FBY0wsTUFBTSxDQUFDQSxNQUFyQixFQUE2QkEsTUFBTSxDQUFDTSxRQUFwQyxFQUE4Q04sTUFBTSxDQUFDTyxRQUFyRCxFQUErRFAsTUFBL0QsQ0FBWjtBQUVBUSxPQUFPLENBQUNDLEdBQVIsc0JBQTBCWixHQUExQjtBQUVBYSxFQUFFLENBQ0NDLFdBREgsQ0FDZUMsU0FEZixFQUVHQyxNQUZILENBRVUsVUFBQ0MsSUFBRCxFQUFtRjtBQUN6RixTQUFRQSxJQUFJLENBQUNDLE9BQUwsQ0FBYSxHQUFiLE1BQXNCLENBQXZCLElBQThCRCxJQUFJLEtBQUtwQixRQUF2QyxJQUFxRG9CLElBQUksQ0FBQ0UsS0FBTCxDQUFXLENBQUMsQ0FBWixNQUFtQixLQUEvRTtBQUNELENBSkgsRUFLR0MsT0FMSCxDQUtXLFVBQUNILElBQUQsRUFBZTtBQUN0QixNQUFNSSxLQUFLLEdBQUdDLE9BQU8sQ0FBQ3hCLElBQUksQ0FBQ3lCLElBQUwsQ0FBVVIsU0FBVixFQUFxQkUsSUFBckIsQ0FBRCxDQUFQLENBQW9DVixTQUFwQyxFQUErQ0Msc0JBQVVnQixTQUF6RCxDQUFkLENBRHNCLENBRXRCOzs7QUFDRWxCLEVBQUFBLEVBQUUsQ0FBQ2UsS0FBSyxDQUFDSSxJQUFQLENBQUYsR0FBaUJKLEtBQWpCO0FBQ0gsQ0FUSDtBQVdBSyxNQUFNLENBQUNDLElBQVAsQ0FBWXJCLEVBQVosRUFBZ0JjLE9BQWhCLENBQXdCLFVBQUFRLFNBQVMsRUFBSTtBQUNuQztBQUNFLE1BQUl0QixFQUFFLENBQUNzQixTQUFELENBQUYsQ0FBY0MsU0FBbEIsRUFBNkI7QUFDN0I7QUFDRXZCLElBQUFBLEVBQUUsQ0FBQ3NCLFNBQUQsQ0FBRixDQUFjQyxTQUFkLENBQXdCdkIsRUFBeEI7QUFDSDtBQUNGLENBTkQsRSxDQVFBOztBQUNBQSxFQUFFLENBQUNDLFNBQUgsR0FBZUEsU0FBZixDLENBQ0E7O0FBQ0FELEVBQUUsQ0FBQ0UsU0FBSCxHQUFlQSxxQkFBZjtBQUVBc0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCekIsRUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBTZXF1ZWxpemUgZnJvbSBcInNlcXVlbGl6ZVwiO1xuXG5pbXBvcnQgKiBhcyBmcyAgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCAgZnJvbSAncGF0aCc7XG5pbXBvcnQge0NvbmZpZ0RhdGFiYXNlfSBmcm9tIFwiLi4vY29uZmlnL2NvbmZpZy5kYXRhYmFzZVwiO1xuXG5jb25zdCBiYXNlbmFtZSA9IHBhdGguYmFzZW5hbWUoX19maWxlbmFtZSk7XG5jb25zdCBlbnYgPSBwcm9jZXNzLmVudi5OT0RFX0VOViB8fCAnZGV2ZWxvcG1lbnQnO1xuY29uc3QgY29uZmlnID0gbmV3IENvbmZpZ0RhdGFiYXNlKCkuR2V0RW52KGVudik7XG5jb25zdCBkYiA9IHt9O1xuXG4vLyBAdHMtaWdub3JlXG5sZXQgc2VxdWVsaXplOiBTZXF1ZWxpemU7XG5cbi8vIEB0cy1pZ25vcmVcbnNlcXVlbGl6ZSA9IG5ldyBTZXF1ZWxpemUoY29uZmlnLmNvbmZpZywgY29uZmlnLnVzZXJuYW1lLCBjb25maWcucGFzc3dvcmQsIGNvbmZpZyk7XG5cbmNvbnNvbGUubG9nKGBSdW5uaW5nIGluICR7ZW52fWApO1xuXG5mc1xuICAucmVhZGRpclN5bmMoX19kaXJuYW1lKVxuICAuZmlsdGVyKChmaWxlOiB7IGluZGV4T2Y6IChhcmcwOiBzdHJpbmcpID0+IG51bWJlcjsgc2xpY2U6IChhcmcwOiBudW1iZXIpID0+IHN0cmluZzsgfSkgPT4ge1xuICAgIHJldHVybiAoZmlsZS5pbmRleE9mKCcuJykgIT09IDApICYmIChmaWxlICE9PSBiYXNlbmFtZSkgJiYgKGZpbGUuc2xpY2UoLTMpID09PSAnLmpzJyk7XG4gIH0pXG4gIC5mb3JFYWNoKChmaWxlOiBhbnkpID0+IHtcbiAgICBjb25zdCBtb2RlbCA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgZmlsZSkpKHNlcXVlbGl6ZSwgU2VxdWVsaXplLkRhdGFUeXBlcyk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZGJbbW9kZWwubmFtZV0gPSBtb2RlbDtcbiAgfSk7XG5cbk9iamVjdC5rZXlzKGRiKS5mb3JFYWNoKG1vZGVsTmFtZSA9PiB7XG4gIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoZGJbbW9kZWxOYW1lXS5hc3NvY2lhdGUpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgICBkYlttb2RlbE5hbWVdLmFzc29jaWF0ZShkYik7XG4gIH1cbn0pO1xuXG4vLyBAdHMtaWdub3JlXG5kYi5zZXF1ZWxpemUgPSBzZXF1ZWxpemU7XG4vLyBAdHMtaWdub3JlXG5kYi5TZXF1ZWxpemUgPSBTZXF1ZWxpemU7XG5cbm1vZHVsZS5leHBvcnRzID0gZGI7XG4iXX0=